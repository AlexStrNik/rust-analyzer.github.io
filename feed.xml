<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 Mar 2020 14:26:38 +0000</pubDate>
    <lastBuildDate>Mon, 23 Mar 2020 14:26:38 +0000</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Changelog #17</title>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/aaa6961aa6d19b405dd2e837a09ac96ed6ace995&quot;&gt;&lt;code&gt;aaa6961&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-23&quot;&gt;&lt;code&gt;2020-03-23&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3582&quot;&gt;&lt;code&gt;#3582&lt;/code&gt;&lt;/a&gt; fetch appropriate value of &lt;code&gt;OUT_DIR&lt;/code&gt; from &lt;code&gt;cargo check&lt;/code&gt;.
This enables rust-analyzer to work correctly with crates which use compile-time code generation. This might significantly slow-down startup time (as we need to run &lt;code&gt;cargo check&lt;/code&gt; build), so this functionality is disabled by default.
To enable, set:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;rust-analyzer.cargoFeatures.loadOutDirsFromCheck&quot;: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3580&quot;&gt;&lt;code&gt;#3580&lt;/code&gt;&lt;/a&gt; macro expander is not more tolerant for syntax errors, which makes code completion inside macros more robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3623&quot;&gt;&lt;code&gt;#3623&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist now works even if some arms are already present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3607&quot;&gt;&lt;code&gt;#3607&lt;/code&gt;&lt;/a&gt; and instructions for installing rust-analyzer from AUR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3640&quot;&gt;&lt;code&gt;#3640&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3651&quot;&gt;&lt;code&gt;#3651&lt;/code&gt;&lt;/a&gt; assist to merge imports with a common prefix.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/77323042-ea8b6980-6d14-11ea-8cb6-23dccafaa024.gif&quot; alt=&quot;77323042 ea8b6980 6d14 11ea 8cb6 23dccafaa024&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3662&quot;&gt;&lt;code&gt;#3662&lt;/code&gt;&lt;/a&gt; correctly part arbitrary enum discriminants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3663&quot;&gt;&lt;code&gt;#3663&lt;/code&gt;&lt;/a&gt; installation from source uses &lt;code&gt;rust-analyzer&lt;/code&gt; from &lt;code&gt;$PATH&lt;/code&gt; by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3677&quot;&gt;&lt;code&gt;#3677&lt;/code&gt;&lt;/a&gt; include &lt;code&gt;macro_rules!&lt;/code&gt; macros in workspace symbols.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3541&quot;&gt;&lt;code&gt;#3541&lt;/code&gt;&lt;/a&gt; correctly complete constants and paths in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3668&quot;&gt;&lt;code&gt;#3668&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t suggest &lt;strong&gt;Invert If&lt;/strong&gt; assist for &lt;code&gt;if let&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3671&quot;&gt;&lt;code&gt;#3671&lt;/code&gt;&lt;/a&gt; fix infinite loop in macro expansion during completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3674&quot;&gt;&lt;code&gt;#3674&lt;/code&gt;&lt;/a&gt; use correct name for the library if it is renamed in Cargo.toml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3673&quot;&gt;&lt;code&gt;#3673&lt;/code&gt;&lt;/a&gt; guard against runaway macro expansion in expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3681&quot;&gt;&lt;code&gt;#3681&lt;/code&gt;&lt;/a&gt; only suggest machine-applicable suggestions from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3678&quot;&gt;&lt;code&gt;#3678&lt;/code&gt;&lt;/a&gt; fix rename behavior in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3584&quot;&gt;&lt;code&gt;#3584&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;dyn Trait&lt;/code&gt; when working with salsa database, which improves compile times in release mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3606&quot;&gt;&lt;code&gt;#3606&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3608&quot;&gt;&lt;code&gt;#3608&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3610&quot;&gt;&lt;code&gt;#3610&lt;/code&gt;&lt;/a&gt; improve audit on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3614&quot;&gt;&lt;code&gt;#3614&lt;/code&gt;&lt;/a&gt; in the TypeScript extension, be more explicit about persistent state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3626&quot;&gt;&lt;code&gt;#3626&lt;/code&gt;&lt;/a&gt; check trailing whitespace on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3629&quot;&gt;&lt;code&gt;#3629&lt;/code&gt;&lt;/a&gt; simplify and streamline plugin auto-update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3635&quot;&gt;&lt;code&gt;#3635&lt;/code&gt;&lt;/a&gt; simplify extension versioning scheme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3656&quot;&gt;&lt;code&gt;#3656&lt;/code&gt;&lt;/a&gt; simplify arena API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3672&quot;&gt;&lt;code&gt;#3672&lt;/code&gt;&lt;/a&gt; assists documentation generator skips hidden files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3632&quot;&gt;&lt;code&gt;#3632&lt;/code&gt;&lt;/a&gt; log errors from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #16</title>
        <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/16/changelog-16.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/16/changelog-16.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ebab250b6bffaafb347ce431d5f4c9eeab4aa7e3&quot;&gt;&lt;code&gt;ebab250&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-16&quot;&gt;&lt;code&gt;2020-03-16&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the minimal required version of VS Code is 1.43.0 now.
In general, we only support the latest release of VS Code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3534&quot;&gt;&lt;code&gt;#3534&lt;/code&gt;&lt;/a&gt; Implement nightly channel for VS Code.
You can enabled nightly channel by setting&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;rust-analyzer.updates.channel&quot;: &quot;nightly&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;option.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3561&quot;&gt;&lt;code&gt;#3561&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;Debug&lt;/code&gt; code lens. It requires &lt;code&gt;vscode-lldb&lt;/code&gt; extension to work.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76760335-bf8d9c80-678d-11ea-80c3-8e8b12a36690.gif&quot; alt=&quot;76760335 bf8d9c80 678d 11ea 80c3 8e8b12a36690&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3506&quot;&gt;&lt;code&gt;#3506&lt;/code&gt;&lt;/a&gt; Trigger associated item completion when typing a name of the item.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76758522-1ee9ad80-678a-11ea-84cd-111739ecd379.gif&quot; alt=&quot;76758522 1ee9ad80 678a 11ea 84cd 111739ecd379&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3549&quot;&gt;&lt;code&gt;#3549&lt;/code&gt;&lt;/a&gt; initial support for the &lt;code&gt;env!&lt;/code&gt; macro. This unlocks preliminary support for &lt;code&gt;include!(concat!(env!(&quot;OUT_DIR&quot;), &quot;/foo.rs&quot;))&lt;/code&gt; pattern.
At the moment, value for &lt;code&gt;OUT_DIR&lt;/code&gt; should be specified in the settings, using &lt;code&gt;rust-analyzer.additionalOutDirs&lt;/code&gt; key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3543&quot;&gt;&lt;code&gt;#3543&lt;/code&gt;&lt;/a&gt; separate options for controlling type and parameter inlay hints:
&lt;code&gt;rust-analyzer.inlayHints.typeHints&lt;/code&gt; and &lt;code&gt;rust-analyzer.inlayHints.parameterHints&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3591&quot;&gt;&lt;code&gt;#3591&lt;/code&gt;&lt;/a&gt; initial support for local &lt;code&gt;macro_rules&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3587&quot;&gt;&lt;code&gt;#3587&lt;/code&gt;&lt;/a&gt; replace &quot;workspace loaded&quot; notification with a progress bar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3552&quot;&gt;&lt;code&gt;#3552&lt;/code&gt;&lt;/a&gt; fix completion for partially unknown types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3542&quot;&gt;&lt;code&gt;#3542&lt;/code&gt;&lt;/a&gt; rename works correctly for field init shortcut.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76759028-28bfe080-678b-11ea-9fb5-5ab6e6476814.gif&quot; alt=&quot;76759028 28bfe080 678b 11ea 9fb5 5ab6e6476814&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3557&quot;&gt;&lt;code&gt;#3557&lt;/code&gt;&lt;/a&gt; on kbd:[Enter], continue multiline non-doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3558&quot;&gt;&lt;code&gt;#3558&lt;/code&gt;&lt;/a&gt; fix parsing of binary expressions where rhs is a block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3564&quot;&gt;&lt;code&gt;#3564&lt;/code&gt;&lt;/a&gt; correctly handle multi-spand diagnostics/fixits from rustc/clippy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3553&quot;&gt;&lt;code&gt;#3553&lt;/code&gt;&lt;/a&gt; show completion for all namespaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3574&quot;&gt;&lt;code&gt;#3574&lt;/code&gt;&lt;/a&gt; fix completion for &lt;code&gt;HashMap::new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3576&quot;&gt;&lt;code&gt;#3576&lt;/code&gt;&lt;/a&gt; correctly parse variadic &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3595&quot;&gt;&lt;code&gt;#3595&lt;/code&gt;&lt;/a&gt; fix completion of trait items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3573&quot;&gt;&lt;code&gt;#3573&lt;/code&gt;&lt;/a&gt; by default, run &lt;code&gt;cargo check&lt;/code&gt; for all crates in workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3551&quot;&gt;&lt;code&gt;#3551&lt;/code&gt;&lt;/a&gt; slightly refactor feature flags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3562&quot;&gt;&lt;code&gt;#3562&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;fmt::Display&lt;/code&gt; for all AST nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3577&quot;&gt;&lt;code&gt;#3577&lt;/code&gt;&lt;/a&gt; protect against diverging macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3540&quot;&gt;&lt;code&gt;#3540&lt;/code&gt;&lt;/a&gt; split &lt;strong&gt;Structural Search Replace&lt;/strong&gt; into query validation and execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #15</title>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/09/changelog-15.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/09/changelog-15.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/5770fa71fa822c998b4d3b57cf1f001dfd84e6e8&quot;&gt;&lt;code&gt;5770fa7&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-09&quot;&gt;&lt;code&gt;2020-03-09&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heads up: this update requires VS Code 1.43.0.
In general, rust-analyzer requires the latest version of VS Code at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3513&quot;&gt;&lt;code&gt;#3513&lt;/code&gt;&lt;/a&gt; code completion in macro calls.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/906069/76160803-92a60d80-612d-11ea-8b51-9566cbb4c773.gif&quot; alt=&quot;76160803 92a60d80 612d 11ea 8b51 9566cbb4c773&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3432&quot;&gt;&lt;code&gt;#3432&lt;/code&gt;&lt;/a&gt; insert argument snippets when completing function calls.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76219227-cd837080-6215-11ea-8d0d-a9447b1d26b1.gif&quot; alt=&quot;76219227 cd837080 6215 11ea 8d0d a9447b1d26b1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Insertion of snippets is controled by &lt;code&gt;completion.insertion.add-argument-snippets&lt;/code&gt; feature flag.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3498&quot;&gt;&lt;code&gt;#3498&lt;/code&gt;&lt;/a&gt; when completing function call, trigger parameter hints automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3500&quot;&gt;&lt;code&gt;#3500&lt;/code&gt;&lt;/a&gt; more concise mode for parameter hints:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76219505-39fe6f80-6216-11ea-9bc2-f2591388c5e6.png&quot; alt=&quot;76219505 39fe6f80 6216 11ea 9bc2 f2591388c5e6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is controlled by &lt;code&gt;call-info.full&lt;/code&gt; feature flag.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3392&quot;&gt;&lt;code&gt;#3392&lt;/code&gt;&lt;/a&gt; support for eager &lt;code&gt;concat!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3456&quot;&gt;&lt;code&gt;#3456&lt;/code&gt;&lt;/a&gt; publish nightly binary releases: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/tag/nightly&quot;&gt;releases/tag/nightly&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3474&quot;&gt;&lt;code&gt;#3474&lt;/code&gt;&lt;/a&gt; on start up, initiate analysis of files even if there were no explicit requests for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3490&quot;&gt;&lt;code&gt;#3490&lt;/code&gt;&lt;/a&gt; support aliases and Self in struct literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3494&quot;&gt;&lt;code&gt;#3494&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;include!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3499&quot;&gt;&lt;code&gt;#3499&lt;/code&gt;&lt;/a&gt; resolve &lt;code&gt;Self::AssocTy&lt;/code&gt; in impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3516&quot;&gt;&lt;code&gt;#3516&lt;/code&gt;&lt;/a&gt; account for visibility during code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3514&quot;&gt;&lt;code&gt;#3514&lt;/code&gt;&lt;/a&gt; flag to update the server binary automatically, without asking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3519&quot;&gt;&lt;code&gt;#3519&lt;/code&gt;&lt;/a&gt; hover on item now includes full module path.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3378&quot;&gt;&lt;code&gt;#3378&lt;/code&gt;&lt;/a&gt; fix inlay hints to work correctly in VS Code for several opened editors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3388&quot;&gt;&lt;code&gt;#3388&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show wrong inlay hints in a diff view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3430&quot;&gt;&lt;code&gt;#3430&lt;/code&gt;&lt;/a&gt; use correct name when completing re-exported functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3509&quot;&gt;&lt;code&gt;#3509&lt;/code&gt;&lt;/a&gt; disallow &lt;code&gt;include!&lt;/code&gt; macro to include itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3520&quot;&gt;&lt;code&gt;#3520&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show trivial type hints for unit structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3526&quot;&gt;&lt;code&gt;#3526&lt;/code&gt;&lt;/a&gt; silence &quot;Rust file outside current workspace&quot; warning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3502&quot;&gt;&lt;code&gt;#3502&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t cache Chalk solver. Counter-intuitively, this allows improves performance by allowing caching elsewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3405&quot;&gt;&lt;code&gt;#3405&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3427&quot;&gt;&lt;code&gt;#3427&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3428&quot;&gt;&lt;code&gt;#3428&lt;/code&gt;&lt;/a&gt; refactor reference and definitions to better accommodate edge cases like field init shorthand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3440&quot;&gt;&lt;code&gt;#3440&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3426&quot;&gt;&lt;code&gt;#3426&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3443&quot;&gt;&lt;code&gt;#3443&lt;/code&gt;&lt;/a&gt; refactor reference search infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3413&quot;&gt;&lt;code&gt;#3413&lt;/code&gt;&lt;/a&gt; update chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3425&quot;&gt;&lt;code&gt;#3425&lt;/code&gt;&lt;/a&gt; fix macro expansion for a single dollar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3458&quot;&gt;&lt;code&gt;#3458&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;cargo xtask dist&lt;/code&gt; for building the distribution package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3489&quot;&gt;&lt;code&gt;#3489&lt;/code&gt;&lt;/a&gt; make sure that during expression lowering every non-missing expression gets a source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3487&quot;&gt;&lt;code&gt;#3487&lt;/code&gt;&lt;/a&gt; add some editing API for manipulating use statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3497&quot;&gt;&lt;code&gt;#3497&lt;/code&gt;&lt;/a&gt; specify additional label on profiling calls, to see, for example, which functions are slow to typecheck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #14</title>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/02/changelog-14.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/02/changelog-14.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/2c8f136b162e795a32e7dff2d0456c323377575d&quot;&gt;&lt;code&gt;2c8f136&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-02&quot;&gt;&lt;code&gt;2020-03-02&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3159&quot;&gt;&lt;code&gt;#3159&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3321&quot;&gt;&lt;code&gt;#3321&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3322&quot;&gt;&lt;code&gt;#3322&lt;/code&gt;&lt;/a&gt; switch syntax highlighting implementation to use the new proposed semantic token LSP/VS Code API.To try this out:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;install vscode plugin from source (using &lt;code&gt;cargo xtask install --client-code&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set &lt;code&gt;&quot;rust-analyzer.highlighting.semanticTokens&quot;: true,&lt;/code&gt; in settings,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install the recent VS Code Insiders&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run &lt;code&gt;code&lt;/code&gt; as &lt;code&gt;code-insiders --enable-proposed-api matklad.rust-analyzer&lt;/code&gt; (handy &lt;a href=&quot;https://github.com/matklad/config/blob/0864beea2f19b9130ac1349c74a2b255df2fb0e8/bin/code&quot;&gt;bash wrapper&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3362&quot;&gt;&lt;code&gt;#3362&lt;/code&gt;&lt;/a&gt; remove kbd:[ctrl+r] default keybinding for running tests &amp;amp; binaries, to avoid conflict with a build-in keybinding.
You might want to assign shortcut for this action, it is a productivity booster!&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75686456-93a5ed80-5c9c-11ea-83b3-05adecfd07c2.gif&quot; alt=&quot;75686456 93a5ed80 5c9c 11ea 83b3 05adecfd07c2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3349&quot;&gt;&lt;code&gt;#3349&lt;/code&gt;&lt;/a&gt; rust-analyzer now highlights code in rust-analyzer&amp;#8217;s own tests as rust:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75685194-77a14c80-5c9a-11ea-86b0-5ac223451b10.png&quot; alt=&quot;75685194 77a14c80 5c9a 11ea 86b0 5ac223451b10&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3294&quot;&gt;&lt;code&gt;#3294&lt;/code&gt;&lt;/a&gt; when joining lines, unwrap single-statement blocks if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3285&quot;&gt;&lt;code&gt;#3285&lt;/code&gt;&lt;/a&gt; structural search replace now correctly ignores whitespace differences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3357&quot;&gt;&lt;code&gt;#3357&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;change visibility&lt;/strong&gt; assist now works with consts:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75685982-c56a8480-5c9b-11ea-84ca-a9cf07bfe0ce.gif&quot; alt=&quot;75685982 c56a8480 5c9b 11ea 84ca a9cf07bfe0ce&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3355&quot;&gt;&lt;code&gt;#3355&lt;/code&gt;&lt;/a&gt; add completion &amp;amp; docs for &lt;code&gt;featureFlag&lt;/code&gt; configuration in VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3309&quot;&gt;&lt;code&gt;#3309&lt;/code&gt;&lt;/a&gt; look for &lt;code&gt;Cargo.toml&lt;/code&gt; not only in the root and parent directory, but also among one-level child directories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3387&quot;&gt;&lt;code&gt;#3387&lt;/code&gt;&lt;/a&gt; type inference for slice patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3397&quot;&gt;&lt;code&gt;#3397&lt;/code&gt;&lt;/a&gt; add minimal metatdata to VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3314&quot;&gt;&lt;code&gt;#3314&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3325&quot;&gt;&lt;code&gt;#3325&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3350&quot;&gt;&lt;code&gt;#3350&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3366&quot;&gt;&lt;code&gt;#3366&lt;/code&gt;&lt;/a&gt; fix a lot of range-mapping bugs for recursive macro invocations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3308&quot;&gt;&lt;code&gt;#3308&lt;/code&gt;&lt;/a&gt; fix conflict for &lt;code&gt;Enter&lt;/code&gt; key with VS Code vim extension.
If rust-analyzer&amp;#8217;s custom on enter behavior causes you trouble, you can disable it by removing the corresponding shortcut from the settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3364&quot;&gt;&lt;code&gt;#3364&lt;/code&gt;&lt;/a&gt; correctly handle unions in IDEs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3367&quot;&gt;&lt;code&gt;#3367&lt;/code&gt;&lt;/a&gt; finally fix highlighting and name goto definition for constants in patterns, like &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3376&quot;&gt;&lt;code&gt;#3376&lt;/code&gt;&lt;/a&gt; fix a common false-positive type mismatch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3380&quot;&gt;&lt;code&gt;#3380&lt;/code&gt;&lt;/a&gt; use unsizing in method resolution &amp;amp; autoderef for indexing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3384&quot;&gt;&lt;code&gt;#3384&lt;/code&gt;&lt;/a&gt; fix name resolution for paths with repeated &lt;code&gt;super&lt;/code&gt; segments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3222&quot;&gt;&lt;code&gt;#3222&lt;/code&gt;&lt;/a&gt; redo the interface between &quot;compiler&quot; and &quot;IDE&quot;.
IDE no longer needs to explicitly track the file a particular bit of syntax tree originated from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3296&quot;&gt;&lt;code&gt;#3296&lt;/code&gt;&lt;/a&gt; bump TypeScript version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3299&quot;&gt;&lt;code&gt;#3299&lt;/code&gt;&lt;/a&gt; more type safe way to deal with custom LSP extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3298&quot;&gt;&lt;code&gt;#3298&lt;/code&gt;&lt;/a&gt; update chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3316&quot;&gt;&lt;code&gt;#3316&lt;/code&gt;&lt;/a&gt; remove code duplication in assists tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3324&quot;&gt;&lt;code&gt;#3324&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3335&quot;&gt;&lt;code&gt;#3335&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3344&quot;&gt;&lt;code&gt;#3344&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3346&quot;&gt;&lt;code&gt;#3346&lt;/code&gt;&lt;/a&gt; refactor syntax highlighting infrastructure to be more future proof and robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3329&quot;&gt;&lt;code&gt;#3329&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3330&quot;&gt;&lt;code&gt;#3330&lt;/code&gt;&lt;/a&gt; run &lt;code&gt;cargo audit&lt;/code&gt; and &lt;code&gt;npm audit&lt;/code&gt; on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3337&quot;&gt;&lt;code&gt;#3337&lt;/code&gt;&lt;/a&gt; remove unused dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3340&quot;&gt;&lt;code&gt;#3340&lt;/code&gt;&lt;/a&gt; gate CI on eslint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3351&quot;&gt;&lt;code&gt;#3351&lt;/code&gt;&lt;/a&gt; better API for working with string literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3360&quot;&gt;&lt;code&gt;#3360&lt;/code&gt;&lt;/a&gt; fix parsing of attributes in let statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3370&quot;&gt;&lt;code&gt;#3370&lt;/code&gt;&lt;/a&gt; extract code for adding a new &lt;code&gt;use&lt;/code&gt; item to a separate module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3374&quot;&gt;&lt;code&gt;#3374&lt;/code&gt;&lt;/a&gt; cleanup API for constructing syntax trees for paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3375&quot;&gt;&lt;code&gt;#3375&lt;/code&gt;&lt;/a&gt; cleanup API for editing syntax trees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3377&quot;&gt;&lt;code&gt;#3377&lt;/code&gt;&lt;/a&gt; simplify API for getting semantic definitions from syntax trees.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #13</title>
        <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/24/changelog-13.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/24/changelog-13.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/cba3c991c8188e87363bbff190e9528606140808&quot;&gt;&lt;code&gt;cba3c99&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-24&quot;&gt;&lt;code&gt;2020-02-24&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3216&quot;&gt;&lt;code&gt;#3216&lt;/code&gt;&lt;/a&gt; language server binary is renamed from &lt;code&gt;ra_lsp_server&lt;/code&gt; to &lt;code&gt;rust-analyzer&lt;/code&gt;.
Additionally, &lt;code&gt;rust-analyzer.lspServerPath&lt;/code&gt; config is renamed to &lt;code&gt;rust-analyzer.serverPath&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3199&quot;&gt;&lt;code&gt;#3199&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3200&quot;&gt;&lt;code&gt;#3200&lt;/code&gt;&lt;/a&gt; merge &lt;code&gt;ra_cli&lt;/code&gt; batch processing utils with the main &lt;code&gt;rust-analyzer&lt;/code&gt; binary.
Now you can, eg, run &lt;code&gt;rust-analyzer analysis-stats path/to/my/project&lt;/code&gt; to type check all functions in batch.
This is intended to help with debugging rust-analyzer itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3206&quot;&gt;&lt;code&gt;#3206&lt;/code&gt;&lt;/a&gt; automatically install &lt;code&gt;rust-src&lt;/code&gt; component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3231&quot;&gt;&lt;code&gt;#3231&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Remove mut&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3252&quot;&gt;&lt;code&gt;#3252&lt;/code&gt;&lt;/a&gt; for syntax highlighting, take token color customization into account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3269&quot;&gt;&lt;code&gt;#3269&lt;/code&gt;&lt;/a&gt; document inlay hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3278&quot;&gt;&lt;code&gt;#3278&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3279&quot;&gt;&lt;code&gt;#3279&lt;/code&gt;&lt;/a&gt; show inlay hints in more cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3275&quot;&gt;&lt;code&gt;#3275&lt;/code&gt;&lt;/a&gt; document structural search and replace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3229&quot;&gt;&lt;code&gt;#3229&lt;/code&gt;&lt;/a&gt; fix a crash with non-ascii whitespace in doc-comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3228&quot;&gt;&lt;code&gt;#3228&lt;/code&gt;&lt;/a&gt; fix hover for for code inside macro calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3233&quot;&gt;&lt;code&gt;#3233&lt;/code&gt;&lt;/a&gt; extend selection correctly handles commas in tuple patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3239&quot;&gt;&lt;code&gt;#3239&lt;/code&gt;&lt;/a&gt; remove dependency on libbacktrace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3241&quot;&gt;&lt;code&gt;#3241&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill missing fields&lt;/strong&gt; fix works with enum variants as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3215&quot;&gt;&lt;code&gt;#3215&lt;/code&gt;&lt;/a&gt; exclude methods from non-parameter types introduced by generic constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3248&quot;&gt;&lt;code&gt;#3248&lt;/code&gt;&lt;/a&gt; fix custom &lt;code&gt;onEnter&lt;/code&gt; not triggering at the start of a doc comment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3251&quot;&gt;&lt;code&gt;#3251&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3282&quot;&gt;&lt;code&gt;#3282&lt;/code&gt;&lt;/a&gt; better error messages when workspace loading fails.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3259&quot;&gt;&lt;code&gt;#3259&lt;/code&gt;&lt;/a&gt; fix handing of associated type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3244&quot;&gt;&lt;code&gt;#3244&lt;/code&gt;&lt;/a&gt; renaming a module now renames both the file and the references to the module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3262&quot;&gt;&lt;code&gt;#3262&lt;/code&gt;&lt;/a&gt; correctly distinguish between const patterns and bindings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3260&quot;&gt;&lt;code&gt;#3260&lt;/code&gt;&lt;/a&gt; fix name resolution rules for build-in types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3230&quot;&gt;&lt;code&gt;#3230&lt;/code&gt;&lt;/a&gt; fix macro expansion for invalid tokens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3277&quot;&gt;&lt;code&gt;#3277&lt;/code&gt;&lt;/a&gt; gracefully handle cancellation errors in VS Code plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3289&quot;&gt;&lt;code&gt;#3289&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3290&quot;&gt;&lt;code&gt;#3290&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t break the kbd:[Enter] key if rust-analyzer returns an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3195&quot;&gt;&lt;code&gt;#3195&lt;/code&gt;&lt;/a&gt; remove dependency on &lt;code&gt;proptest&lt;/code&gt; property based testing library to
improve compile times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3209&quot;&gt;&lt;code&gt;#3209&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3205&quot;&gt;&lt;code&gt;#3205&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3258&quot;&gt;&lt;code&gt;#3258&lt;/code&gt;&lt;/a&gt; switch TypeScript extension linter to eslint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3214&quot;&gt;&lt;code&gt;#3214&lt;/code&gt;&lt;/a&gt; document all modules in the language server crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3026&quot;&gt;&lt;code&gt;#3026&lt;/code&gt;&lt;/a&gt; simplify internal representation of syntax errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3234&quot;&gt;&lt;code&gt;#3234&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3235&quot;&gt;&lt;code&gt;#3235&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3236&quot;&gt;&lt;code&gt;#3236&lt;/code&gt;&lt;/a&gt; refactor handing of symbols/defs in IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3242&quot;&gt;&lt;code&gt;#3242&lt;/code&gt;&lt;/a&gt; make sure that, by default, rust-analyzer does not depend on C code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3247&quot;&gt;&lt;code&gt;#3247&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;rust-analyzer --version&lt;/code&gt; more useful and reliable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3263&quot;&gt;&lt;code&gt;#3263&lt;/code&gt;&lt;/a&gt; use chalk for unsizing coercions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3274&quot;&gt;&lt;code&gt;#3274&lt;/code&gt;&lt;/a&gt; refactor navigation-related code to use hir instead of AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3261&quot;&gt;&lt;code&gt;#3261&lt;/code&gt;&lt;/a&gt; setup client-side logging infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #12</title>
        <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/17/changelog-12.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/17/changelog-12.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2&quot;&gt;&lt;code&gt;94fb9ad&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-17&quot;&gt;&lt;code&gt;2020-02-17&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3140&quot;&gt;&lt;code&gt;#3140&lt;/code&gt;&lt;/a&gt; we now have a basic manual: &lt;a href=&quot;https://rust-analyzer.github.io/manual.html&quot; class=&quot;bare&quot;&gt;https://rust-analyzer.github.io/manual.html&lt;/a&gt;.
PRs with improvements are welcome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3108&quot;&gt;&lt;code&gt;#3108&lt;/code&gt;&lt;/a&gt; complete default function, types and constants in impl blocks:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/74660243-0d66b300-5196-11ea-8327-205b1262e7a2.gif&quot; alt=&quot;74660243 0d66b300 5196 11ea 8327 205b1262e7a2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3169&quot;&gt;&lt;code&gt;#3169&lt;/code&gt;&lt;/a&gt; display fields when completing an enum variant:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/16367467/74607251-8ce17d00-50d7-11ea-9d4d-38d198a4aec0.png&quot; alt=&quot;74607251 8ce17d00 50d7 11ea 9d4d 38d198a4aec0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3099&quot;&gt;&lt;code&gt;#3099&lt;/code&gt;&lt;/a&gt; initial implementation of Structural Search &amp;amp; Replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3074&quot;&gt;&lt;code&gt;#3074&lt;/code&gt;&lt;/a&gt; initial support for OR-patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3064&quot;&gt;&lt;code&gt;#3064&lt;/code&gt;&lt;/a&gt; rename works inside macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3120&quot;&gt;&lt;code&gt;#3120&lt;/code&gt;&lt;/a&gt; support auto-import of traits for unresolved method calls in some cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3162&quot;&gt;&lt;code&gt;#3162&lt;/code&gt;&lt;/a&gt; VS Code extension automatically downloads the correct server binary release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3153&quot;&gt;&lt;code&gt;#3153&lt;/code&gt;&lt;/a&gt; when running a Cargo test, pass &lt;code&gt;--exact&lt;/code&gt; flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3181&quot;&gt;&lt;code&gt;#3181&lt;/code&gt;&lt;/a&gt; add ability to pass additional arguments to &lt;code&gt;rustfmt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3084&quot;&gt;&lt;code&gt;#3084&lt;/code&gt;&lt;/a&gt; better error reporting around workspace loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3102&quot;&gt;&lt;code&gt;#3102&lt;/code&gt;&lt;/a&gt; better error reporting when deserializing wrong config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3092&quot;&gt;&lt;code&gt;#3092&lt;/code&gt;&lt;/a&gt; fix error when starting the server immediately after download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3100&quot;&gt;&lt;code&gt;#3100&lt;/code&gt;&lt;/a&gt; improved error handling when downloading the server binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3114&quot;&gt;&lt;code&gt;#3114&lt;/code&gt;&lt;/a&gt; fix type inference for match arms of unknown type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3121&quot;&gt;&lt;code&gt;#3121&lt;/code&gt;&lt;/a&gt; during auto-import, don&amp;#8217;t insert &lt;code&gt;use&lt;/code&gt; statements before inner attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3127&quot;&gt;&lt;code&gt;#3127&lt;/code&gt;&lt;/a&gt; support unnamed arguments in function pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3143&quot;&gt;&lt;code&gt;#3143&lt;/code&gt;&lt;/a&gt; fix name resolution for &lt;code&gt;std::sync::atomic::AtomicX&lt;/code&gt; types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3145&quot;&gt;&lt;code&gt;#3145&lt;/code&gt;&lt;/a&gt; &lt;code&gt;Self&lt;/code&gt; inside trait&amp;#8217;s default methods implements the trait.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3150&quot;&gt;&lt;code&gt;#3150&lt;/code&gt;&lt;/a&gt; increase the limit on the number of iterations the name resolution algorithm can do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3139&quot;&gt;&lt;code&gt;#3139&lt;/code&gt;&lt;/a&gt; bump VS Code requirenment to 1.42.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3086&quot;&gt;&lt;code&gt;#3086&lt;/code&gt;&lt;/a&gt; automate publishing of the VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3062&quot;&gt;&lt;code&gt;#3062&lt;/code&gt;&lt;/a&gt; preliminary work on type inference for slice patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3136&quot;&gt;&lt;code&gt;#3136&lt;/code&gt;&lt;/a&gt; rewrite `xtask`s in a more declarative style.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3131&quot;&gt;&lt;code&gt;#3131&lt;/code&gt;&lt;/a&gt; simplify configuration handling in VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3157&quot;&gt;&lt;code&gt;#3157&lt;/code&gt;&lt;/a&gt; add randomization to &lt;code&gt;analysis-stats&lt;/code&gt;, which should help with debugging non-determinism issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3171&quot;&gt;&lt;code&gt;#3171&lt;/code&gt;&lt;/a&gt; enable profiling for &lt;code&gt;analysis-bench&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3174&quot;&gt;&lt;code&gt;#3174&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3174&quot;&gt;&lt;code&gt;#3174&lt;/code&gt;&lt;/a&gt; improve debugging settings for VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3179&quot;&gt;&lt;code&gt;#3179&lt;/code&gt;&lt;/a&gt; refactor macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3190&quot;&gt;&lt;code&gt;#3190&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3191&quot;&gt;&lt;code&gt;#3191&lt;/code&gt;&lt;/a&gt; simplify VS Code extension life cycle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>2019 Financial Report</title>
        <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/02/11/2019-financial-report.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/02/11/2019-financial-report.html</guid>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a short financial report for &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt; money for 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve got 9933 EUR on open collective after fees.
We&amp;#8217;ve rounded that number up to 10000 (using some funds from this year) and split it into two buckets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;80% for Ferrous Systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20% for contributors, not affiliated with Ferrous&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ferrous share went to paying for part of &lt;a href=&quot;https://github.com/matklad&quot;&gt;@matklad&lt;/a&gt;'s time (thats me!), and for administrative tasks.
The remaining 2000 EUR were payed to &lt;a href=&quot;https://github.com/flodiebold&quot;&gt;@flodiebold&lt;/a&gt; for implementing and maintaining type inference infrastructure of rust-analyzer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our biggest Open Collective sponsors in 2019 were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.embark-studios.com&quot;&gt;Embark Studios&lt;/a&gt; (6000EUR)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://discordapp.com&quot;&gt;Discord&lt;/a&gt; (1000EUR)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use rust-analyzer professionally, consider asking your company to &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;sponsor&lt;/a&gt; the development of this project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a reminder, we publish &lt;a href=&quot;https://rust-analyzer.github.io/thisweek&quot;&gt;weekly changelog&lt;/a&gt; to report the progress on rust-analyzer and explain where the money go.&lt;/p&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #11</title>
        <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/10/changelog-11.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/10/changelog-11.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/5b703bdc582be427ee62d250b3d3290165c36b8c&quot;&gt;&lt;code&gt;5b703bd&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-10&quot;&gt;&lt;code&gt;2020-02-10&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3053&quot;&gt;&lt;code&gt;#3053&lt;/code&gt;&lt;/a&gt; VS Code extension now tries to automatically download the latest release.
Additionally, the extension is now published to the Marketplace (&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer&quot;&gt;link&lt;/a&gt;).
Note that if you want to continue using rust-analyzer build from sources, you need to add&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
      &quot;rust-analyzer.raLspServerPath&quot;: &quot;ra_lsp_server&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to &lt;code&gt;settings.json&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2981&quot;&gt;&lt;code&gt;#2981&lt;/code&gt;&lt;/a&gt; changed the way &lt;code&gt;onEnter&lt;/code&gt; handler works in VS Code.
We no longer register a custom &lt;code&gt;ontype&lt;/code&gt; command.
Instead, we provide a shortcut, bound to kbd:[Enter].
If you have &lt;code&gt;enableEnhancedTyping: false&lt;/code&gt; in you settings, you&amp;#8217;ll want to disable this shortcut.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3050&quot;&gt;&lt;code&gt;#3050&lt;/code&gt;&lt;/a&gt; implement argument-position &lt;code&gt;impl Trait&lt;/code&gt; again (support for &lt;code&gt;impl Trait&lt;/code&gt; was removed with the Chalk upgrade last week). Return-position &lt;code&gt;impl Trait&lt;/code&gt; support will still have to wait for Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2911&quot;&gt;&lt;code&gt;#2911&lt;/code&gt;&lt;/a&gt; display errors from the lexer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2962&quot;&gt;&lt;code&gt;#2962&lt;/code&gt;&lt;/a&gt; groundwork for &lt;code&gt;use Trait as _&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2948&quot;&gt;&lt;code&gt;#2948&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add Explicit Type&lt;/strong&gt; assist now can replace &lt;code&gt;_&lt;/code&gt; types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3040&quot;&gt;&lt;code&gt;#3040&lt;/code&gt;&lt;/a&gt; rework value parameter parsing to use 2018 edition syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3054&quot;&gt;&lt;code&gt;#3054&lt;/code&gt;&lt;/a&gt; move Emacs support upstream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3017&quot;&gt;&lt;code&gt;#3017&lt;/code&gt;&lt;/a&gt; correctly handle crates with &lt;code&gt;-&lt;/code&gt; in names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3044&quot;&gt;&lt;code&gt;#3044&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t crash when receiving unknown file for cargo diagnostics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3047&quot;&gt;&lt;code&gt;#3047&lt;/code&gt;&lt;/a&gt; fix parsing of &lt;code&gt;async unsafe&lt;/code&gt; functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3024&quot;&gt;&lt;code&gt;#3024&lt;/code&gt;&lt;/a&gt; fix leaking observers and promises in VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3001&quot;&gt;&lt;code&gt;#3001&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3003&quot;&gt;&lt;code&gt;#3003&lt;/code&gt;&lt;/a&gt; reduce the number of TypeScript dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3018&quot;&gt;&lt;code&gt;#3018&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3045&quot;&gt;&lt;code&gt;#3045&lt;/code&gt;&lt;/a&gt; refactor some assists to use type-safe AST editing API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3031&quot;&gt;&lt;code&gt;#3031&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3034&quot;&gt;&lt;code&gt;#3034&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3063&quot;&gt;&lt;code&gt;#3063&lt;/code&gt;&lt;/a&gt; refactor auto-import infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3069&quot;&gt;&lt;code&gt;#3069&lt;/code&gt;&lt;/a&gt; refactor interface for creating assists groups.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3081&quot;&gt;&lt;code&gt;#3081&lt;/code&gt;&lt;/a&gt; automate release process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3029&quot;&gt;&lt;code&gt;#3029&lt;/code&gt;&lt;/a&gt; extract &lt;code&gt;ra_ide_db&lt;/code&gt; crate to improve compile times and code organization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer.github.io/pull/31&quot;&gt;&lt;code&gt;rust-analyzer.github.io#31&lt;/code&gt;&lt;/a&gt; switch changelogs from markdown to AsciiDoctor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bump NodeJS requirement to 12 (you only need node if you build VS Code extension from source).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #10</title>
        <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/03/changelog-10.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/03/changelog-10.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/c57ed0cfb29bc2b311299eebb4f7820a31068a37&quot;&gt;&lt;code&gt;c57ed0c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-03&quot;&gt;&lt;code&gt;2020-02-03&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2963&quot;&gt;&lt;code&gt;#2963&lt;/code&gt;&lt;/a&gt; add auto-import support to Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2978&quot;&gt;&lt;code&gt;#2978&lt;/code&gt;&lt;/a&gt; support auto-import for functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2982&quot;&gt;&lt;code&gt;#2982&lt;/code&gt;&lt;/a&gt; merge imports when auto-importing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2933&quot;&gt;&lt;code&gt;#2933&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t compute diagnostics on the main thread.
That fixes a long-standing issue with peformance degradation due to &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2810&quot;&gt;&lt;code&gt;#2810&lt;/code&gt;&lt;/a&gt; make magical search of struct literals work in more contexts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2916&quot;&gt;&lt;code&gt;#2916&lt;/code&gt;&lt;/a&gt; fix slow &lt;code&gt;cargo check&lt;/code&gt; performance due to unbuffered reads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2924&quot;&gt;&lt;code&gt;#2924&lt;/code&gt;&lt;/a&gt; avoid spawning more than one Cargo for &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2917&quot;&gt;&lt;code&gt;#2917&lt;/code&gt;&lt;/a&gt; prefer imports starting with &lt;code&gt;std&lt;/code&gt; for auto import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2937&quot;&gt;&lt;code&gt;#2937&lt;/code&gt;&lt;/a&gt; fix an issue where &lt;code&gt;cargo check&lt;/code&gt; got stuck in an infinite loop if some procedural macro printed to stdout.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2970&quot;&gt;&lt;code&gt;#2970&lt;/code&gt;&lt;/a&gt; fix some clint-side bugs with syntax highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2972&quot;&gt;&lt;code&gt;#2972&lt;/code&gt;&lt;/a&gt;, a fun one, prevent a child process for flipping rust-analyzer&amp;#8217;s stdin into non-blocking mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2959&quot;&gt;&lt;code&gt;#2959&lt;/code&gt;&lt;/a&gt; fix a bug where diagnostics from &lt;code&gt;cargo check&lt;/code&gt; were obsolete.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2872&quot;&gt;&lt;code&gt;#2872&lt;/code&gt;&lt;/a&gt; update Chalk. This should fix some cases of extremely slow trait checking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2934&quot;&gt;&lt;code&gt;#2934&lt;/code&gt;&lt;/a&gt; log error if the main loop turns takes too long.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2931&quot;&gt;&lt;code&gt;#2931&lt;/code&gt;&lt;/a&gt; document &lt;code&gt;test_utils&lt;/code&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2940&quot;&gt;&lt;code&gt;#2940&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2941&quot;&gt;&lt;code&gt;#2941&lt;/code&gt;&lt;/a&gt; update developer documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2943&quot;&gt;&lt;code&gt;#2943&lt;/code&gt;&lt;/a&gt; improve memory usage tracking infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2895&quot;&gt;&lt;code&gt;#2895&lt;/code&gt;&lt;/a&gt; make internal profiling infrastructure more maintainable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2967&quot;&gt;&lt;code&gt;#2967&lt;/code&gt;&lt;/a&gt; speed up the build of rust-analyzer by using profile overrides.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2987&quot;&gt;&lt;code&gt;#2987&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2986&quot;&gt;&lt;code&gt;#2986&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2989&quot;&gt;&lt;code&gt;#2989&lt;/code&gt;&lt;/a&gt; cleanup VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2991&quot;&gt;&lt;code&gt;#2991&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2998&quot;&gt;&lt;code&gt;#2998&lt;/code&gt;&lt;/a&gt; unsuccessfully try to improve TypeScript build process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #9</title>
        <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/01/27/changelog-9.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/01/27/changelog-9.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/87e1baf2421d80bf6d6acd776e29827196931a32&quot;&gt;&lt;code&gt;87e1baf&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-01-27&quot;&gt;&lt;code&gt;2020-01-27&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2887&quot;&gt;&lt;code&gt;#2887&lt;/code&gt;&lt;/a&gt; auto import assist.
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/73185119-cf89e800-411d-11ea-9213-d6eac89256c4.gif&quot; alt=&quot;73185119 cf89e800 411d 11ea 9213 d6eac89256c4&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2883&quot;&gt;&lt;code&gt;#2883&lt;/code&gt;&lt;/a&gt; enable semantic highlighting inside macros.
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/73185287-137ced00-411e-11ea-93ed-e415daa9c5dd.gif&quot; alt=&quot;73185287 137ced00 411e 11ea 93ed e415daa9c5dd&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2899&quot;&gt;&lt;code&gt;#2899&lt;/code&gt;&lt;/a&gt; detect popular macro-based test frameworks for the purposes of the &quot;Run &amp;#8230;&amp;#8203;&quot; lenses/keybinding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2901&quot;&gt;&lt;code&gt;#2901&lt;/code&gt;&lt;/a&gt; cancel pending requests when shutdown is initiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2907&quot;&gt;&lt;code&gt;#2907&lt;/code&gt;&lt;/a&gt; inline variable does not remove unused variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2906&quot;&gt;&lt;code&gt;#2906&lt;/code&gt;&lt;/a&gt; fix a bug on windows where main loop was starved by background tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2893&quot;&gt;&lt;code&gt;#2893&lt;/code&gt;&lt;/a&gt; add a guided tour of lossless syntax trees to the dev docs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2891&quot;&gt;&lt;code&gt;#2891&lt;/code&gt;&lt;/a&gt; remove code duplication in validation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/2898&quot;&gt;&lt;code&gt;#2898&lt;/code&gt;&lt;/a&gt; cleanup &lt;code&gt;cargo watch&lt;/code&gt; state management.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
