<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Apr 2020 14:08:29 +0000</pubDate>
    <lastBuildDate>Mon, 06 Apr 2020 14:08:29 +0000</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Changelog #19</title>
        <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/04/06/changelog-19.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/04/06/changelog-19.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9&quot;&gt;&lt;code&gt;ec3fb1c&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-04-06&quot;&gt;&lt;code&gt;2020-04-06&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BREAKING&lt;/strong&gt; &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3824&quot;&gt;&lt;code&gt;#3824&lt;/code&gt;&lt;/a&gt; changed the name of many options. The current set is specified &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9/editors/code/package.json#L176-L390&quot;&gt;here&lt;/a&gt;. If you are using a non-VS Code client, note that rust-analyzer now asks for
&lt;code&gt;rust-analyzer&lt;/code&gt; secion of configuration, and expects this config to be present in &lt;code&gt;initializationOptions&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3804&quot;&gt;&lt;code&gt;#3804&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3825&quot;&gt;&lt;code&gt;#3825&lt;/code&gt;&lt;/a&gt; it is now possible to use arbitrary command for on the fly error checking:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.checkOnSave.overrideCommand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./x.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--json-output&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3807&quot;&gt;&lt;code&gt;#3807&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3825&quot;&gt;&lt;code&gt;#3825&lt;/code&gt;&lt;/a&gt; similarly, it is now possible to completely override &lt;code&gt;rustfmt&lt;/code&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3820&quot;&gt;&lt;code&gt;#3820&lt;/code&gt;&lt;/a&gt; remove support for old syntax highlighting. To use the new semantic tokens highlighting:&lt;/p&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;install the recent vscode insiders build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.highlighting.semanticTokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.semanticHighlighting.enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to config&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run vscode as &lt;code&gt;code-insiders --enabled-proposed-api matklad.rust-analyzer&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make sure to use a color theme with support for syntax highlighitng.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust specific tokens and modifiers are listed &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/ec3fb1cdb4f1808a11fb6057550ed721c2aa36a9/editors/code/package.json#L489-L531&quot;&gt;here&lt;/a&gt;. For example, to underline all &lt;code&gt;mut&lt;/code&gt; and &lt;code&gt;&amp;amp;mut&lt;/code&gt; variables, add this to &lt;code&gt;settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.tokenColorCustomizationsExperimental&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;*.mutable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fontStyle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;underline&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3814&quot;&gt;&lt;code&gt;#3814&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Implement From for enum variant&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78559964-8f2da100-7815-11ea-99a4-00b431df7022.gif&quot; alt=&quot;78559964 8f2da100 7815 11ea 99a4 00b431df7022&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3746&quot;&gt;&lt;code&gt;#3746&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Create function&lt;/strong&gt; assist.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78560241-111dca00-7816-11ea-89a4-5489ddf6d9dc.gif&quot; alt=&quot;78560241 111dca00 7816 11ea 89a4 5489ddf6d9dc&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3840&quot;&gt;&lt;code&gt;#3840&lt;/code&gt;&lt;/a&gt; automatically add call parenthesis for tuple-like enum variants&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/78560584-9a350100-7816-11ea-93ad-66bf625fcb93.gif&quot; alt=&quot;78560584 9a350100 7816 11ea 93ad 66bf625fcb93&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3666&quot;&gt;&lt;code&gt;#3666&lt;/code&gt;&lt;/a&gt; handle some configuration changes without server restart.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3777&quot;&gt;&lt;code&gt;#3777&lt;/code&gt;&lt;/a&gt; populate default task list in VS Code with cargo commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3765&quot;&gt;&lt;code&gt;#3765&lt;/code&gt;&lt;/a&gt; SSR no longer takes field order into account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3829&quot;&gt;&lt;code&gt;#3829&lt;/code&gt;&lt;/a&gt; SSR treats method call and UFCS equivalently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3779&quot;&gt;&lt;code&gt;#3779&lt;/code&gt;&lt;/a&gt; code completion for recrod literals now suggest only fields which are not already present.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3785&quot;&gt;&lt;code&gt;#3785&lt;/code&gt;&lt;/a&gt; attach doc comments to declaration even if there&amp;#8217;s a blank line after comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3781&quot;&gt;&lt;code&gt;#3781&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3819&quot;&gt;&lt;code&gt;#3819&lt;/code&gt;&lt;/a&gt; make &lt;strong&gt;Run&lt;/strong&gt; action correctly handle the case with several major versions of the package in the crate graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3786&quot;&gt;&lt;code&gt;#3786&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assits does not leave the floating comma behind.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3797&quot;&gt;&lt;code&gt;#3797&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show chaining hints for record literals and unit structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3844&quot;&gt;&lt;code&gt;#3844&lt;/code&gt;&lt;/a&gt; make sure that default configuration values are honored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3857&quot;&gt;&lt;code&gt;#3857&lt;/code&gt;&lt;/a&gt; fix inference of function pointer return types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3858&quot;&gt;&lt;code&gt;#3858&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show return type for &lt;code&gt;()&lt;/code&gt;-returning function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3817&quot;&gt;&lt;code&gt;#3817&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3815&quot;&gt;&lt;code&gt;#3815&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3816&quot;&gt;&lt;code&gt;#3816&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Show Syntax Tree&lt;/strong&gt; internal command now has syntax highlighting and auto scroll from source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3805&quot;&gt;&lt;code&gt;#3805&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3806&quot;&gt;&lt;code&gt;#3806&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3811&quot;&gt;&lt;code&gt;#3811&lt;/code&gt;&lt;/a&gt; lower literal patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3790&quot;&gt;&lt;code&gt;#3790&lt;/code&gt;&lt;/a&gt; use uniiform naming (&lt;code&gt;config&lt;/code&gt;) for all configuration-related functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3792&quot;&gt;&lt;code&gt;#3792&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3802&quot;&gt;&lt;code&gt;#3802&lt;/code&gt;&lt;/a&gt; inspired by Emacs, rename &quot;cargo watch&quot; functionality to flycheck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3738&quot;&gt;&lt;code&gt;#3738&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3800&quot;&gt;&lt;code&gt;#3800&lt;/code&gt;&lt;/a&gt; more groundwork for proc-macro support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3793&quot;&gt;&lt;code&gt;#3793&lt;/code&gt;&lt;/a&gt; add integrated test for code-generating build.rs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3795&quot;&gt;&lt;code&gt;#3795&lt;/code&gt;&lt;/a&gt; decouple flycheck and project model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3809&quot;&gt;&lt;code&gt;#3809&lt;/code&gt;&lt;/a&gt; reduce the number of structs holding configuration from three to one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3836&quot;&gt;&lt;code&gt;#3836&lt;/code&gt;&lt;/a&gt; wrap macros in pattern position into &lt;code&gt;ast::MacroPat&lt;/code&gt; node to not confuse them with expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3744&quot;&gt;&lt;code&gt;#3744&lt;/code&gt;&lt;/a&gt; upgrade chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #18</title>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/30/changelog-18.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/30/changelog-18.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/9e12b9e6fdc03ea6bc35a88cfb5d5d6751672ec8&quot;&gt;&lt;code&gt;9e12b9e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-30&quot;&gt;&lt;code&gt;2020-03-30&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3710&quot;&gt;&lt;code&gt;#3710&lt;/code&gt;&lt;/a&gt; display inlay hints for method chains (controlled by &lt;code&gt;rust-analyzer.inlayHints.chainingHints&lt;/code&gt; config).&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/77911990-0ef5c180-7292-11ea-9779-7ce60d8e7b2e.png&quot; alt=&quot;77911990 0ef5c180 7292 11ea 9779 7ce60d8e7b2e&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3689&quot;&gt;&lt;code&gt;#3689&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist now handles tuples of enums.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3685&quot;&gt;&lt;code&gt;#3685&lt;/code&gt;&lt;/a&gt; auto import now works for macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3704&quot;&gt;&lt;code&gt;#3704&lt;/code&gt;&lt;/a&gt; add troubleshooting section to the manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3694&quot;&gt;&lt;code&gt;#3694&lt;/code&gt;&lt;/a&gt; completion for fields does not suggest already specified fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3732&quot;&gt;&lt;code&gt;#3732&lt;/code&gt;&lt;/a&gt; assist to replace &lt;code&gt;.unwrap&lt;/code&gt; with a &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3742&quot;&gt;&lt;code&gt;#3742&lt;/code&gt;&lt;/a&gt; assist to replace &lt;code&gt;let&lt;/code&gt; with &lt;code&gt;if let&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3693&quot;&gt;&lt;code&gt;#3693&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Rust Analyzer: version&lt;/strong&gt; command now shows tag in addition to commit hash.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3698&quot;&gt;&lt;code&gt;#3698&lt;/code&gt;&lt;/a&gt; &lt;code&gt;dbg!&lt;/code&gt; postfix completion wraps the reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3703&quot;&gt;&lt;code&gt;#3703&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t enabled proposed APIs on stable release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3707&quot;&gt;&lt;code&gt;#3707&lt;/code&gt;&lt;/a&gt; use real visibility in reference search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3714&quot;&gt;&lt;code&gt;#3714&lt;/code&gt;&lt;/a&gt; correctly detect x86 CPU architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3717&quot;&gt;&lt;code&gt;#3717&lt;/code&gt;&lt;/a&gt; always expand macros during code analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3722&quot;&gt;&lt;code&gt;#3722&lt;/code&gt;&lt;/a&gt; fix parsing lambdas with return type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3724&quot;&gt;&lt;code&gt;#3724&lt;/code&gt;&lt;/a&gt; blame the right queries for memory usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3725&quot;&gt;&lt;code&gt;#3725&lt;/code&gt;&lt;/a&gt; fix TypeScript memory leak on server restart.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3745&quot;&gt;&lt;code&gt;#3745&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Merge Imports&lt;/strong&gt; assist correctly handles &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3764&quot;&gt;&lt;code&gt;#3764&lt;/code&gt;&lt;/a&gt; fix index out of bounds error during workspace loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3761&quot;&gt;&lt;code&gt;#3761&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist correctly preserves comments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3753&quot;&gt;&lt;code&gt;#3753&lt;/code&gt;&lt;/a&gt; introduce &lt;code&gt;stdx&lt;/code&gt; crate for storing missing batteries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3695&quot;&gt;&lt;code&gt;#3695&lt;/code&gt;&lt;/a&gt; simplify configuration handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3708&quot;&gt;&lt;code&gt;#3708&lt;/code&gt;&lt;/a&gt; generalize syntax rewriting infrastructure to allow removal of nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3664&quot;&gt;&lt;code&gt;#3664&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3692&quot;&gt;&lt;code&gt;#3692&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3727&quot;&gt;&lt;code&gt;#3727&lt;/code&gt;&lt;/a&gt; groundwork for procedural macros support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3726&quot;&gt;&lt;code&gt;#3726&lt;/code&gt;&lt;/a&gt; refactor &lt;strong&gt;Rust Analyzer: Status&lt;/strong&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3754&quot;&gt;&lt;code&gt;#3754&lt;/code&gt;&lt;/a&gt; use auto-joining threads for managing &lt;code&gt;cargo watch&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Macros vs Rename</title>
        <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/03/30/macros-vs-rename.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/03/30/macros-vs-rename.html</guid>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve already written before about how precise code completion is impossible to do inside Rust macros:
&lt;a href=&quot;https://github.com/matklad/proc-caesar&quot; class=&quot;bare&quot;&gt;https://github.com/matklad/proc-caesar&lt;/a&gt;. Today I&amp;#8217;d like to write a short note about another impossibility result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correct automatic rename is not possible in a language with rust-style macros.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;call_foo!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;call_foo!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the expected result for renaming &lt;code&gt;a::foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;?
There isn&amp;#8217;t one, as the same macro refers to different &lt;code&gt;foo&lt;/code&gt; at different call-sites!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the problem is even deeper than ambiguity.
Consider this (silly) crate:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[macro_export]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, it is pretty clear what we want to get after renaming &lt;code&gt;HELLO&lt;/code&gt; to &lt;code&gt;GREETING&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[macro_export]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say_hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GREETING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, it is impossible to formalize this transformation.
To the human reader, it is &lt;em&gt;obvious&lt;/em&gt; that the right hand side of a macro should be parsed as an expression.
But this intuition is flawed&amp;#8201;&amp;#8212;&amp;#8201;the right hand side is just a sequence of tokens, and it receives a meaning only when we call the macro.
And there&amp;#8217;s no guarantee, in general case, that it would be interpreted as an expression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[doc(hidden)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;macro_rules!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tt:tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;m!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;m!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;stringify!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;expr = {},tt = {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together this means that the theoretically best definition of &lt;strong&gt;correct automated rename&lt;/strong&gt; we can get in Rust is limited.
We can handle code outside the macros and code inside macro calls.
For macro definitions, at best we can give a list of locations that require manual intervention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also seems plausible that, with some heuristic, we can infer renames in macro definitions as well.
For example, we can look at all call sites of the macro, and see if they all agree that a certain token in the macro definition needs change.&lt;/p&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #17</title>
        <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/23/changelog-17.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/aaa6961aa6d19b405dd2e837a09ac96ed6ace995&quot;&gt;&lt;code&gt;aaa6961&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-23&quot;&gt;&lt;code&gt;2020-03-23&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3582&quot;&gt;&lt;code&gt;#3582&lt;/code&gt;&lt;/a&gt; fetch appropriate value of &lt;code&gt;OUT_DIR&lt;/code&gt; from &lt;code&gt;cargo check&lt;/code&gt;.
This enables rust-analyzer to work correctly with crates which use compile-time code generation. This might significantly slow-down startup time (as we need to run &lt;code&gt;cargo check&lt;/code&gt; build), so this functionality is disabled by default.
To enable, set:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.cargoFeatures.loadOutDirsFromCheck&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3580&quot;&gt;&lt;code&gt;#3580&lt;/code&gt;&lt;/a&gt; macro expander is now more tolerant for syntax errors, which makes code completion inside macros more robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3623&quot;&gt;&lt;code&gt;#3623&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill Match Arms&lt;/strong&gt; assist now works even if some arms are already present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3607&quot;&gt;&lt;code&gt;#3607&lt;/code&gt;&lt;/a&gt; and instructions for installing rust-analyzer from AUR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3640&quot;&gt;&lt;code&gt;#3640&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3651&quot;&gt;&lt;code&gt;#3651&lt;/code&gt;&lt;/a&gt; assist to merge imports with a common prefix.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/77323042-ea8b6980-6d14-11ea-8cb6-23dccafaa024.gif&quot; alt=&quot;77323042 ea8b6980 6d14 11ea 8cb6 23dccafaa024&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3662&quot;&gt;&lt;code&gt;#3662&lt;/code&gt;&lt;/a&gt; correctly part arbitrary enum discriminants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3663&quot;&gt;&lt;code&gt;#3663&lt;/code&gt;&lt;/a&gt; installation from source uses &lt;code&gt;rust-analyzer&lt;/code&gt; from &lt;code&gt;$PATH&lt;/code&gt; by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3677&quot;&gt;&lt;code&gt;#3677&lt;/code&gt;&lt;/a&gt; include &lt;code&gt;macro_rules!&lt;/code&gt; macros in workspace symbols.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3541&quot;&gt;&lt;code&gt;#3541&lt;/code&gt;&lt;/a&gt; correctly complete constants and paths in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3668&quot;&gt;&lt;code&gt;#3668&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t suggest &lt;strong&gt;Invert If&lt;/strong&gt; assist for &lt;code&gt;if let&lt;/code&gt; syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3671&quot;&gt;&lt;code&gt;#3671&lt;/code&gt;&lt;/a&gt; fix infinite loop in macro expansion during completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3674&quot;&gt;&lt;code&gt;#3674&lt;/code&gt;&lt;/a&gt; use correct name for the library if it is renamed in Cargo.toml.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3673&quot;&gt;&lt;code&gt;#3673&lt;/code&gt;&lt;/a&gt; guard against runaway macro expansion in expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3681&quot;&gt;&lt;code&gt;#3681&lt;/code&gt;&lt;/a&gt; only suggest machine-applicable suggestions from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3678&quot;&gt;&lt;code&gt;#3678&lt;/code&gt;&lt;/a&gt; fix rename behavior in macros.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3584&quot;&gt;&lt;code&gt;#3584&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;dyn Trait&lt;/code&gt; when working with salsa database, which improves compile times in release mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3606&quot;&gt;&lt;code&gt;#3606&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3608&quot;&gt;&lt;code&gt;#3608&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3610&quot;&gt;&lt;code&gt;#3610&lt;/code&gt;&lt;/a&gt; improve audit on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3614&quot;&gt;&lt;code&gt;#3614&lt;/code&gt;&lt;/a&gt; in the TypeScript extension, be more explicit about persistent state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3626&quot;&gt;&lt;code&gt;#3626&lt;/code&gt;&lt;/a&gt; check trailing whitespace on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3629&quot;&gt;&lt;code&gt;#3629&lt;/code&gt;&lt;/a&gt; simplify and streamline plugin auto-update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3635&quot;&gt;&lt;code&gt;#3635&lt;/code&gt;&lt;/a&gt; simplify extension versioning scheme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3656&quot;&gt;&lt;code&gt;#3656&lt;/code&gt;&lt;/a&gt; simplify arena API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3672&quot;&gt;&lt;code&gt;#3672&lt;/code&gt;&lt;/a&gt; assists documentation generator skips hidden files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3632&quot;&gt;&lt;code&gt;#3632&lt;/code&gt;&lt;/a&gt; log errors from &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #16</title>
        <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/16/changelog-16.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/16/changelog-16.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ebab250b6bffaafb347ce431d5f4c9eeab4aa7e3&quot;&gt;&lt;code&gt;ebab250&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-16&quot;&gt;&lt;code&gt;2020-03-16&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the minimal required version of VS Code is 1.43.0 now.
In general, we only support the latest release of VS Code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3534&quot;&gt;&lt;code&gt;#3534&lt;/code&gt;&lt;/a&gt; Implement nightly channel for VS Code.
You can enabled nightly channel by setting&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&quot;rust-analyzer.updates.channel&quot;: &quot;nightly&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;option.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3561&quot;&gt;&lt;code&gt;#3561&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;Debug&lt;/code&gt; code lens. It requires &lt;code&gt;vscode-lldb&lt;/code&gt; extension to work.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76760335-bf8d9c80-678d-11ea-80c3-8e8b12a36690.gif&quot; alt=&quot;76760335 bf8d9c80 678d 11ea 80c3 8e8b12a36690&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3506&quot;&gt;&lt;code&gt;#3506&lt;/code&gt;&lt;/a&gt; Trigger associated item completion when typing a name of the item.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76758522-1ee9ad80-678a-11ea-84cd-111739ecd379.gif&quot; alt=&quot;76758522 1ee9ad80 678a 11ea 84cd 111739ecd379&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3549&quot;&gt;&lt;code&gt;#3549&lt;/code&gt;&lt;/a&gt; initial support for the &lt;code&gt;env!&lt;/code&gt; macro. This unlocks preliminary support for &lt;code&gt;include!(concat!(env!(&quot;OUT_DIR&quot;), &quot;/foo.rs&quot;))&lt;/code&gt; pattern.
At the moment, value for &lt;code&gt;OUT_DIR&lt;/code&gt; should be specified in the settings, using &lt;code&gt;rust-analyzer.additionalOutDirs&lt;/code&gt; key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3543&quot;&gt;&lt;code&gt;#3543&lt;/code&gt;&lt;/a&gt; separate options for controlling type and parameter inlay hints:
&lt;code&gt;rust-analyzer.inlayHints.typeHints&lt;/code&gt; and &lt;code&gt;rust-analyzer.inlayHints.parameterHints&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3591&quot;&gt;&lt;code&gt;#3591&lt;/code&gt;&lt;/a&gt; initial support for local &lt;code&gt;macro_rules&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3587&quot;&gt;&lt;code&gt;#3587&lt;/code&gt;&lt;/a&gt; replace &quot;workspace loaded&quot; notification with a progress bar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3552&quot;&gt;&lt;code&gt;#3552&lt;/code&gt;&lt;/a&gt; fix completion for partially unknown types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3542&quot;&gt;&lt;code&gt;#3542&lt;/code&gt;&lt;/a&gt; rename works correctly for field init shortcut.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76759028-28bfe080-678b-11ea-9fb5-5ab6e6476814.gif&quot; alt=&quot;76759028 28bfe080 678b 11ea 9fb5 5ab6e6476814&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3557&quot;&gt;&lt;code&gt;#3557&lt;/code&gt;&lt;/a&gt; on kbd:[Enter], continue multiline non-doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3558&quot;&gt;&lt;code&gt;#3558&lt;/code&gt;&lt;/a&gt; fix parsing of binary expressions where rhs is a block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3564&quot;&gt;&lt;code&gt;#3564&lt;/code&gt;&lt;/a&gt; correctly handle multi-spand diagnostics/fixits from rustc/clippy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3553&quot;&gt;&lt;code&gt;#3553&lt;/code&gt;&lt;/a&gt; show completion for all namespaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3574&quot;&gt;&lt;code&gt;#3574&lt;/code&gt;&lt;/a&gt; fix completion for &lt;code&gt;HashMap::new&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3576&quot;&gt;&lt;code&gt;#3576&lt;/code&gt;&lt;/a&gt; correctly parse variadic &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3595&quot;&gt;&lt;code&gt;#3595&lt;/code&gt;&lt;/a&gt; fix completion of trait items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3573&quot;&gt;&lt;code&gt;#3573&lt;/code&gt;&lt;/a&gt; by default, run &lt;code&gt;cargo check&lt;/code&gt; for all crates in workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3551&quot;&gt;&lt;code&gt;#3551&lt;/code&gt;&lt;/a&gt; slightly refactor feature flags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3562&quot;&gt;&lt;code&gt;#3562&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;fmt::Display&lt;/code&gt; for all AST nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3577&quot;&gt;&lt;code&gt;#3577&lt;/code&gt;&lt;/a&gt; protect against diverging macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3540&quot;&gt;&lt;code&gt;#3540&lt;/code&gt;&lt;/a&gt; split &lt;strong&gt;Structural Search Replace&lt;/strong&gt; into query validation and execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #15</title>
        <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/09/changelog-15.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/09/changelog-15.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/5770fa71fa822c998b4d3b57cf1f001dfd84e6e8&quot;&gt;&lt;code&gt;5770fa7&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-09&quot;&gt;&lt;code&gt;2020-03-09&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heads up: this update requires VS Code 1.43.0.
In general, rust-analyzer requires the latest version of VS Code at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3513&quot;&gt;&lt;code&gt;#3513&lt;/code&gt;&lt;/a&gt; code completion in macro calls.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/906069/76160803-92a60d80-612d-11ea-8b51-9566cbb4c773.gif&quot; alt=&quot;76160803 92a60d80 612d 11ea 8b51 9566cbb4c773&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3432&quot;&gt;&lt;code&gt;#3432&lt;/code&gt;&lt;/a&gt; insert argument snippets when completing function calls.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76219227-cd837080-6215-11ea-8d0d-a9447b1d26b1.gif&quot; alt=&quot;76219227 cd837080 6215 11ea 8d0d a9447b1d26b1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Insertion of snippets is controled by &lt;code&gt;completion.insertion.add-argument-snippets&lt;/code&gt; feature flag.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3498&quot;&gt;&lt;code&gt;#3498&lt;/code&gt;&lt;/a&gt; when completing function call, trigger parameter hints automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3500&quot;&gt;&lt;code&gt;#3500&lt;/code&gt;&lt;/a&gt; more concise mode for parameter hints:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/76219505-39fe6f80-6216-11ea-9bc2-f2591388c5e6.png&quot; alt=&quot;76219505 39fe6f80 6216 11ea 9bc2 f2591388c5e6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is controlled by &lt;code&gt;call-info.full&lt;/code&gt; feature flag.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3392&quot;&gt;&lt;code&gt;#3392&lt;/code&gt;&lt;/a&gt; support for eager &lt;code&gt;concat!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3456&quot;&gt;&lt;code&gt;#3456&lt;/code&gt;&lt;/a&gt; publish nightly binary releases: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/tag/nightly&quot;&gt;releases/tag/nightly&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3474&quot;&gt;&lt;code&gt;#3474&lt;/code&gt;&lt;/a&gt; on start up, initiate analysis of files even if there were no explicit requests for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3490&quot;&gt;&lt;code&gt;#3490&lt;/code&gt;&lt;/a&gt; support aliases and Self in struct literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3494&quot;&gt;&lt;code&gt;#3494&lt;/code&gt;&lt;/a&gt; implement &lt;code&gt;include!&lt;/code&gt; macro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3499&quot;&gt;&lt;code&gt;#3499&lt;/code&gt;&lt;/a&gt; resolve &lt;code&gt;Self::AssocTy&lt;/code&gt; in impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3516&quot;&gt;&lt;code&gt;#3516&lt;/code&gt;&lt;/a&gt; account for visibility during code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3514&quot;&gt;&lt;code&gt;#3514&lt;/code&gt;&lt;/a&gt; flag to update the server binary automatically, without asking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3519&quot;&gt;&lt;code&gt;#3519&lt;/code&gt;&lt;/a&gt; hover on item now includes full module path.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3378&quot;&gt;&lt;code&gt;#3378&lt;/code&gt;&lt;/a&gt; fix inlay hints to work correctly in VS Code for several opened editors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3388&quot;&gt;&lt;code&gt;#3388&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show wrong inlay hints in a diff view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3430&quot;&gt;&lt;code&gt;#3430&lt;/code&gt;&lt;/a&gt; use correct name when completing re-exported functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3509&quot;&gt;&lt;code&gt;#3509&lt;/code&gt;&lt;/a&gt; disallow &lt;code&gt;include!&lt;/code&gt; macro to include itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3520&quot;&gt;&lt;code&gt;#3520&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t show trivial type hints for unit structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3526&quot;&gt;&lt;code&gt;#3526&lt;/code&gt;&lt;/a&gt; silence &quot;Rust file outside current workspace&quot; warning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3502&quot;&gt;&lt;code&gt;#3502&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t cache Chalk solver. Counter-intuitively, this allows improves performance by allowing caching elsewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3405&quot;&gt;&lt;code&gt;#3405&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3427&quot;&gt;&lt;code&gt;#3427&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3428&quot;&gt;&lt;code&gt;#3428&lt;/code&gt;&lt;/a&gt; refactor reference and definitions to better accommodate edge cases like field init shorthand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3440&quot;&gt;&lt;code&gt;#3440&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3426&quot;&gt;&lt;code&gt;#3426&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3443&quot;&gt;&lt;code&gt;#3443&lt;/code&gt;&lt;/a&gt; refactor reference search infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3413&quot;&gt;&lt;code&gt;#3413&lt;/code&gt;&lt;/a&gt; update chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3425&quot;&gt;&lt;code&gt;#3425&lt;/code&gt;&lt;/a&gt; fix macro expansion for a single dollar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3458&quot;&gt;&lt;code&gt;#3458&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;cargo xtask dist&lt;/code&gt; for building the distribution package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3489&quot;&gt;&lt;code&gt;#3489&lt;/code&gt;&lt;/a&gt; make sure that during expression lowering every non-missing expression gets a source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3487&quot;&gt;&lt;code&gt;#3487&lt;/code&gt;&lt;/a&gt; add some editing API for manipulating use statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3497&quot;&gt;&lt;code&gt;#3497&lt;/code&gt;&lt;/a&gt; specify additional label on profiling calls, to see, for example, which functions are slow to typecheck.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #14</title>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/03/02/changelog-14.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/03/02/changelog-14.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/2c8f136b162e795a32e7dff2d0456c323377575d&quot;&gt;&lt;code&gt;2c8f136&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-03-02&quot;&gt;&lt;code&gt;2020-03-02&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3159&quot;&gt;&lt;code&gt;#3159&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3321&quot;&gt;&lt;code&gt;#3321&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3322&quot;&gt;&lt;code&gt;#3322&lt;/code&gt;&lt;/a&gt; switch syntax highlighting implementation to use the new proposed semantic token LSP/VS Code API.To try this out:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;install vscode plugin from source (using &lt;code&gt;cargo xtask install --client-code&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set &lt;code&gt;&quot;rust-analyzer.highlighting.semanticTokens&quot;: true,&lt;/code&gt; in settings,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install the recent VS Code Insiders&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run &lt;code&gt;code&lt;/code&gt; as &lt;code&gt;code-insiders --enable-proposed-api matklad.rust-analyzer&lt;/code&gt; (handy &lt;a href=&quot;https://github.com/matklad/config/blob/0864beea2f19b9130ac1349c74a2b255df2fb0e8/bin/code&quot;&gt;bash wrapper&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3362&quot;&gt;&lt;code&gt;#3362&lt;/code&gt;&lt;/a&gt; remove kbd:[ctrl+r] default keybinding for running tests &amp;amp; binaries, to avoid conflict with a build-in keybinding.
You might want to assign shortcut for this action, it is a productivity booster!&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75686456-93a5ed80-5c9c-11ea-83b3-05adecfd07c2.gif&quot; alt=&quot;75686456 93a5ed80 5c9c 11ea 83b3 05adecfd07c2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3349&quot;&gt;&lt;code&gt;#3349&lt;/code&gt;&lt;/a&gt; rust-analyzer now highlights code in rust-analyzer&amp;#8217;s own tests as rust:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75685194-77a14c80-5c9a-11ea-86b0-5ac223451b10.png&quot; alt=&quot;75685194 77a14c80 5c9a 11ea 86b0 5ac223451b10&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3294&quot;&gt;&lt;code&gt;#3294&lt;/code&gt;&lt;/a&gt; when joining lines, unwrap single-statement blocks if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3285&quot;&gt;&lt;code&gt;#3285&lt;/code&gt;&lt;/a&gt; structural search replace now correctly ignores whitespace differences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3357&quot;&gt;&lt;code&gt;#3357&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;change visibility&lt;/strong&gt; assist now works with consts:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/75685982-c56a8480-5c9b-11ea-84ca-a9cf07bfe0ce.gif&quot; alt=&quot;75685982 c56a8480 5c9b 11ea 84ca a9cf07bfe0ce&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3355&quot;&gt;&lt;code&gt;#3355&lt;/code&gt;&lt;/a&gt; add completion &amp;amp; docs for &lt;code&gt;featureFlag&lt;/code&gt; configuration in VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3309&quot;&gt;&lt;code&gt;#3309&lt;/code&gt;&lt;/a&gt; look for &lt;code&gt;Cargo.toml&lt;/code&gt; not only in the root and parent directory, but also among one-level child directories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3387&quot;&gt;&lt;code&gt;#3387&lt;/code&gt;&lt;/a&gt; type inference for slice patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3397&quot;&gt;&lt;code&gt;#3397&lt;/code&gt;&lt;/a&gt; add minimal metatdata to VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3314&quot;&gt;&lt;code&gt;#3314&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3325&quot;&gt;&lt;code&gt;#3325&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3350&quot;&gt;&lt;code&gt;#3350&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3366&quot;&gt;&lt;code&gt;#3366&lt;/code&gt;&lt;/a&gt; fix a lot of range-mapping bugs for recursive macro invocations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3308&quot;&gt;&lt;code&gt;#3308&lt;/code&gt;&lt;/a&gt; fix conflict for &lt;code&gt;Enter&lt;/code&gt; key with VS Code vim extension.
If rust-analyzer&amp;#8217;s custom on enter behavior causes you trouble, you can disable it by removing the corresponding shortcut from the settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3364&quot;&gt;&lt;code&gt;#3364&lt;/code&gt;&lt;/a&gt; correctly handle unions in IDEs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3367&quot;&gt;&lt;code&gt;#3367&lt;/code&gt;&lt;/a&gt; finally fix highlighting and name goto definition for constants in patterns, like &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3376&quot;&gt;&lt;code&gt;#3376&lt;/code&gt;&lt;/a&gt; fix a common false-positive type mismatch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3380&quot;&gt;&lt;code&gt;#3380&lt;/code&gt;&lt;/a&gt; use unsizing in method resolution &amp;amp; autoderef for indexing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3384&quot;&gt;&lt;code&gt;#3384&lt;/code&gt;&lt;/a&gt; fix name resolution for paths with repeated &lt;code&gt;super&lt;/code&gt; segments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3222&quot;&gt;&lt;code&gt;#3222&lt;/code&gt;&lt;/a&gt; redo the interface between &quot;compiler&quot; and &quot;IDE&quot;.
IDE no longer needs to explicitly track the file a particular bit of syntax tree originated from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3296&quot;&gt;&lt;code&gt;#3296&lt;/code&gt;&lt;/a&gt; bump TypeScript version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3299&quot;&gt;&lt;code&gt;#3299&lt;/code&gt;&lt;/a&gt; more type safe way to deal with custom LSP extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3298&quot;&gt;&lt;code&gt;#3298&lt;/code&gt;&lt;/a&gt; update chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3316&quot;&gt;&lt;code&gt;#3316&lt;/code&gt;&lt;/a&gt; remove code duplication in assists tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3324&quot;&gt;&lt;code&gt;#3324&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3335&quot;&gt;&lt;code&gt;#3335&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3344&quot;&gt;&lt;code&gt;#3344&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3346&quot;&gt;&lt;code&gt;#3346&lt;/code&gt;&lt;/a&gt; refactor syntax highlighting infrastructure to be more future proof and robust.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3329&quot;&gt;&lt;code&gt;#3329&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3330&quot;&gt;&lt;code&gt;#3330&lt;/code&gt;&lt;/a&gt; run &lt;code&gt;cargo audit&lt;/code&gt; and &lt;code&gt;npm audit&lt;/code&gt; on CI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3337&quot;&gt;&lt;code&gt;#3337&lt;/code&gt;&lt;/a&gt; remove unused dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3340&quot;&gt;&lt;code&gt;#3340&lt;/code&gt;&lt;/a&gt; gate CI on eslint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3351&quot;&gt;&lt;code&gt;#3351&lt;/code&gt;&lt;/a&gt; better API for working with string literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3360&quot;&gt;&lt;code&gt;#3360&lt;/code&gt;&lt;/a&gt; fix parsing of attributes in let statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3370&quot;&gt;&lt;code&gt;#3370&lt;/code&gt;&lt;/a&gt; extract code for adding a new &lt;code&gt;use&lt;/code&gt; item to a separate module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3374&quot;&gt;&lt;code&gt;#3374&lt;/code&gt;&lt;/a&gt; cleanup API for constructing syntax trees for paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3375&quot;&gt;&lt;code&gt;#3375&lt;/code&gt;&lt;/a&gt; cleanup API for editing syntax trees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3377&quot;&gt;&lt;code&gt;#3377&lt;/code&gt;&lt;/a&gt; simplify API for getting semantic definitions from syntax trees.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #13</title>
        <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/24/changelog-13.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/24/changelog-13.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/cba3c991c8188e87363bbff190e9528606140808&quot;&gt;&lt;code&gt;cba3c99&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-24&quot;&gt;&lt;code&gt;2020-02-24&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3216&quot;&gt;&lt;code&gt;#3216&lt;/code&gt;&lt;/a&gt; language server binary is renamed from &lt;code&gt;ra_lsp_server&lt;/code&gt; to &lt;code&gt;rust-analyzer&lt;/code&gt;.
Additionally, &lt;code&gt;rust-analyzer.lspServerPath&lt;/code&gt; config is renamed to &lt;code&gt;rust-analyzer.serverPath&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3199&quot;&gt;&lt;code&gt;#3199&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3200&quot;&gt;&lt;code&gt;#3200&lt;/code&gt;&lt;/a&gt; merge &lt;code&gt;ra_cli&lt;/code&gt; batch processing utils with the main &lt;code&gt;rust-analyzer&lt;/code&gt; binary.
Now you can, eg, run &lt;code&gt;rust-analyzer analysis-stats path/to/my/project&lt;/code&gt; to type check all functions in batch.
This is intended to help with debugging rust-analyzer itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3206&quot;&gt;&lt;code&gt;#3206&lt;/code&gt;&lt;/a&gt; automatically install &lt;code&gt;rust-src&lt;/code&gt; component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3231&quot;&gt;&lt;code&gt;#3231&lt;/code&gt;&lt;/a&gt; add &lt;strong&gt;Remove mut&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3252&quot;&gt;&lt;code&gt;#3252&lt;/code&gt;&lt;/a&gt; for syntax highlighting, take token color customization into account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3269&quot;&gt;&lt;code&gt;#3269&lt;/code&gt;&lt;/a&gt; document inlay hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3278&quot;&gt;&lt;code&gt;#3278&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3279&quot;&gt;&lt;code&gt;#3279&lt;/code&gt;&lt;/a&gt; show inlay hints in more cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3275&quot;&gt;&lt;code&gt;#3275&lt;/code&gt;&lt;/a&gt; document structural search and replace.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3229&quot;&gt;&lt;code&gt;#3229&lt;/code&gt;&lt;/a&gt; fix a crash with non-ascii whitespace in doc-comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3228&quot;&gt;&lt;code&gt;#3228&lt;/code&gt;&lt;/a&gt; fix hover for for code inside macro calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3233&quot;&gt;&lt;code&gt;#3233&lt;/code&gt;&lt;/a&gt; extend selection correctly handles commas in tuple patterns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3239&quot;&gt;&lt;code&gt;#3239&lt;/code&gt;&lt;/a&gt; remove dependency on libbacktrace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3241&quot;&gt;&lt;code&gt;#3241&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Fill missing fields&lt;/strong&gt; fix works with enum variants as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3215&quot;&gt;&lt;code&gt;#3215&lt;/code&gt;&lt;/a&gt; exclude methods from non-parameter types introduced by generic constraints&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3248&quot;&gt;&lt;code&gt;#3248&lt;/code&gt;&lt;/a&gt; fix custom &lt;code&gt;onEnter&lt;/code&gt; not triggering at the start of a doc comment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3251&quot;&gt;&lt;code&gt;#3251&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3282&quot;&gt;&lt;code&gt;#3282&lt;/code&gt;&lt;/a&gt; better error messages when workspace loading fails.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3259&quot;&gt;&lt;code&gt;#3259&lt;/code&gt;&lt;/a&gt; fix handing of associated type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3244&quot;&gt;&lt;code&gt;#3244&lt;/code&gt;&lt;/a&gt; renaming a module now renames both the file and the references to the module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3262&quot;&gt;&lt;code&gt;#3262&lt;/code&gt;&lt;/a&gt; correctly distinguish between const patterns and bindings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3260&quot;&gt;&lt;code&gt;#3260&lt;/code&gt;&lt;/a&gt; fix name resolution rules for build-in types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3230&quot;&gt;&lt;code&gt;#3230&lt;/code&gt;&lt;/a&gt; fix macro expansion for invalid tokens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3277&quot;&gt;&lt;code&gt;#3277&lt;/code&gt;&lt;/a&gt; gracefully handle cancellation errors in VS Code plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3289&quot;&gt;&lt;code&gt;#3289&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3290&quot;&gt;&lt;code&gt;#3290&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t break the kbd:[Enter] key if rust-analyzer returns an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3195&quot;&gt;&lt;code&gt;#3195&lt;/code&gt;&lt;/a&gt; remove dependency on &lt;code&gt;proptest&lt;/code&gt; property based testing library to
improve compile times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3209&quot;&gt;&lt;code&gt;#3209&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3205&quot;&gt;&lt;code&gt;#3205&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3258&quot;&gt;&lt;code&gt;#3258&lt;/code&gt;&lt;/a&gt; switch TypeScript extension linter to eslint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3214&quot;&gt;&lt;code&gt;#3214&lt;/code&gt;&lt;/a&gt; document all modules in the language server crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3026&quot;&gt;&lt;code&gt;#3026&lt;/code&gt;&lt;/a&gt; simplify internal representation of syntax errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3234&quot;&gt;&lt;code&gt;#3234&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3235&quot;&gt;&lt;code&gt;#3235&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3236&quot;&gt;&lt;code&gt;#3236&lt;/code&gt;&lt;/a&gt; refactor handing of symbols/defs in IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3242&quot;&gt;&lt;code&gt;#3242&lt;/code&gt;&lt;/a&gt; make sure that, by default, rust-analyzer does not depend on C code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3247&quot;&gt;&lt;code&gt;#3247&lt;/code&gt;&lt;/a&gt; make &lt;code&gt;rust-analyzer --version&lt;/code&gt; more useful and reliable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3263&quot;&gt;&lt;code&gt;#3263&lt;/code&gt;&lt;/a&gt; use chalk for unsizing coercions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3274&quot;&gt;&lt;code&gt;#3274&lt;/code&gt;&lt;/a&gt; refactor navigation-related code to use hir instead of AST.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3261&quot;&gt;&lt;code&gt;#3261&lt;/code&gt;&lt;/a&gt; setup client-side logging infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #12</title>
        <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/02/17/changelog-12.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/02/17/changelog-12.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/94fb9ad6b3167e8b8073a09fcf0cb135f383d3d2&quot;&gt;&lt;code&gt;94fb9ad&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-02-17&quot;&gt;&lt;code&gt;2020-02-17&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3140&quot;&gt;&lt;code&gt;#3140&lt;/code&gt;&lt;/a&gt; we now have a basic manual: &lt;a href=&quot;https://rust-analyzer.github.io/manual.html&quot; class=&quot;bare&quot;&gt;https://rust-analyzer.github.io/manual.html&lt;/a&gt;.
PRs with improvements are welcome!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3108&quot;&gt;&lt;code&gt;#3108&lt;/code&gt;&lt;/a&gt; complete default function, types and constants in impl blocks:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/74660243-0d66b300-5196-11ea-8327-205b1262e7a2.gif&quot; alt=&quot;74660243 0d66b300 5196 11ea 8327 205b1262e7a2&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3169&quot;&gt;&lt;code&gt;#3169&lt;/code&gt;&lt;/a&gt; display fields when completing an enum variant:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/16367467/74607251-8ce17d00-50d7-11ea-9d4d-38d198a4aec0.png&quot; alt=&quot;74607251 8ce17d00 50d7 11ea 9d4d 38d198a4aec0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3099&quot;&gt;&lt;code&gt;#3099&lt;/code&gt;&lt;/a&gt; initial implementation of Structural Search &amp;amp; Replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3074&quot;&gt;&lt;code&gt;#3074&lt;/code&gt;&lt;/a&gt; initial support for OR-patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3064&quot;&gt;&lt;code&gt;#3064&lt;/code&gt;&lt;/a&gt; rename works inside macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3120&quot;&gt;&lt;code&gt;#3120&lt;/code&gt;&lt;/a&gt; support auto-import of traits for unresolved method calls in some cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3162&quot;&gt;&lt;code&gt;#3162&lt;/code&gt;&lt;/a&gt; VS Code extension automatically downloads the correct server binary release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3153&quot;&gt;&lt;code&gt;#3153&lt;/code&gt;&lt;/a&gt; when running a Cargo test, pass &lt;code&gt;--exact&lt;/code&gt; flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3181&quot;&gt;&lt;code&gt;#3181&lt;/code&gt;&lt;/a&gt; add ability to pass additional arguments to &lt;code&gt;rustfmt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3084&quot;&gt;&lt;code&gt;#3084&lt;/code&gt;&lt;/a&gt; better error reporting around workspace loading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3102&quot;&gt;&lt;code&gt;#3102&lt;/code&gt;&lt;/a&gt; better error reporting when deserializing wrong config.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3092&quot;&gt;&lt;code&gt;#3092&lt;/code&gt;&lt;/a&gt; fix error when starting the server immediately after download.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3100&quot;&gt;&lt;code&gt;#3100&lt;/code&gt;&lt;/a&gt; improved error handling when downloading the server binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3114&quot;&gt;&lt;code&gt;#3114&lt;/code&gt;&lt;/a&gt; fix type inference for match arms of unknown type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3121&quot;&gt;&lt;code&gt;#3121&lt;/code&gt;&lt;/a&gt; during auto-import, don&amp;#8217;t insert &lt;code&gt;use&lt;/code&gt; statements before inner attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3127&quot;&gt;&lt;code&gt;#3127&lt;/code&gt;&lt;/a&gt; support unnamed arguments in function pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3143&quot;&gt;&lt;code&gt;#3143&lt;/code&gt;&lt;/a&gt; fix name resolution for &lt;code&gt;std::sync::atomic::AtomicX&lt;/code&gt; types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3145&quot;&gt;&lt;code&gt;#3145&lt;/code&gt;&lt;/a&gt; &lt;code&gt;Self&lt;/code&gt; inside trait&amp;#8217;s default methods implements the trait.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3150&quot;&gt;&lt;code&gt;#3150&lt;/code&gt;&lt;/a&gt; increase the limit on the number of iterations the name resolution algorithm can do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3139&quot;&gt;&lt;code&gt;#3139&lt;/code&gt;&lt;/a&gt; bump VS Code requirenment to 1.42.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3086&quot;&gt;&lt;code&gt;#3086&lt;/code&gt;&lt;/a&gt; automate publishing of the VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3062&quot;&gt;&lt;code&gt;#3062&lt;/code&gt;&lt;/a&gt; preliminary work on type inference for slice patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3136&quot;&gt;&lt;code&gt;#3136&lt;/code&gt;&lt;/a&gt; rewrite `xtask`s in a more declarative style.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3131&quot;&gt;&lt;code&gt;#3131&lt;/code&gt;&lt;/a&gt; simplify configuration handling in VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3157&quot;&gt;&lt;code&gt;#3157&lt;/code&gt;&lt;/a&gt; add randomization to &lt;code&gt;analysis-stats&lt;/code&gt;, which should help with debugging non-determinism issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3171&quot;&gt;&lt;code&gt;#3171&lt;/code&gt;&lt;/a&gt; enable profiling for &lt;code&gt;analysis-bench&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3174&quot;&gt;&lt;code&gt;#3174&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3174&quot;&gt;&lt;code&gt;#3174&lt;/code&gt;&lt;/a&gt; improve debugging settings for VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3179&quot;&gt;&lt;code&gt;#3179&lt;/code&gt;&lt;/a&gt; refactor macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3190&quot;&gt;&lt;code&gt;#3190&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/3191&quot;&gt;&lt;code&gt;#3191&lt;/code&gt;&lt;/a&gt; simplify VS Code extension life cycle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>2019 Financial Report</title>
        <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/02/11/2019-financial-report.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/02/11/2019-financial-report.html</guid>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a short financial report for &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt; money for 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve got 9933 EUR on open collective after fees.
We&amp;#8217;ve rounded that number up to 10000 (using some funds from this year) and split it into two buckets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;80% for Ferrous Systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20% for contributors, not affiliated with Ferrous&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ferrous share went to paying for part of &lt;a href=&quot;https://github.com/matklad&quot;&gt;@matklad&lt;/a&gt;'s time (thats me!), and for administrative tasks.
The remaining 2000 EUR were payed to &lt;a href=&quot;https://github.com/flodiebold&quot;&gt;@flodiebold&lt;/a&gt; for implementing and maintaining type inference infrastructure of rust-analyzer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our biggest Open Collective sponsors in 2019 were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.embark-studios.com&quot;&gt;Embark Studios&lt;/a&gt; (6000EUR)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://discordapp.com&quot;&gt;Discord&lt;/a&gt; (1000EUR)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use rust-analyzer professionally, consider asking your company to &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;sponsor&lt;/a&gt; the development of this project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a reminder, we publish &lt;a href=&quot;https://rust-analyzer.github.io/thisweek&quot;&gt;weekly changelog&lt;/a&gt; to report the progress on rust-analyzer and explain where the money go.&lt;/p&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
